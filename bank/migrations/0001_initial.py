# Generated by Django 3.1 on 2020-08-17 18:00

import bank.models
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.citext
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djmoney.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('discord_id', models.BigIntegerField(null=True, unique=True)),
                ('discord_profile_picture_url', models.URLField(null=True)),
                ('discord_username', models.CharField(max_length=50, null=True)),
                ('discord_dms_enabled', models.BooleanField(default=True, verbose_name='Notifications via the Democraciv Discord Bot')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('iban', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='Bank Account', max_length=100)),
                ('balance_currency', djmoney.models.fields.CurrencyField(choices=[('CAN', 'Canadian Loonie'), ('CIV', 'Civilization Coin'), ('LRA', 'Lira'), ('MAO', 'Maori Pound')], default='USD', editable=False, max_length=3)),
                ('balance', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0'), default_currency='USD', max_digits=20)),
                ('currency', djmoney.models.fields.CurrencyField(default='XYZ', max_length=3)),
                ('is_frozen', models.BooleanField(default=False)),
                ('is_default_for_currency', models.BooleanField(default=True, help_text='This bank account will be used when someone tries to send you money in this currency without specifying an IBAN, for example with the Democraciv Discord Bot. You can only have one default bank account per currency.', verbose_name='Default Bank Account for this Currency')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('ottoman_threshold_variable', models.DecimalField(decimal_places=2, max_digits=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Corporation',
            fields=[
                ('name', models.CharField(max_length=100, unique=True)),
                ('abbreviation', django.contrib.postgres.fields.citext.CICharField(help_text='You cannot change the abbreviation in the future.', max_length=8, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(max_length=1000)),
                ('discord_server', models.CharField(blank=True, help_text='You can leave this blank.', max_length=50, null=True)),
                ('is_public_viewable', models.BooleanField(default=True)),
                ('nation', models.CharField(choices=[('OT', 'Ottoman Mercantile Divan'), ('MA', 'United Iwi of the Maori'), ('CA', 'Canadian Republic')], default='OT', help_text='Select the nation you operate out of. Different nations may have different laws on things like corporate tax.', max_length=2)),
                ('organization_type', models.CharField(choices=[('CORP', 'Corporation'), ('ORG', 'Organization'), ('GOV', 'Government Entity'), ('NPO', 'Non-Profit'), ('SIG', 'Special Interest Group')], default='CORP', help_text='This is purely for role-playing purposes and has no effect on anything.', max_length=4, verbose_name='Type of Organization')),
                ('industry', models.CharField(blank=True, choices=[('AD', 'Advertisement & Campaign Services'), ('F', 'Financial Services'), ('PR', 'Press'), ('D', 'Defense'), ('O', 'Other')], help_text='This is purely for role-playing purposes and has no effect on anything. You can leave this blank.', max_length=2, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('manage_employees', 'Invite new people and fire existing employees'), ('add_corp_account', 'Create corporate bank account')),
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_currency', djmoney.models.fields.CurrencyField(choices=[('CAN', 'Canadian Loonie'), ('CIV', 'Civilization Coin'), ('LRA', 'Lira'), ('MAO', 'Maori Pound')], default='XYZ', editable=False, max_length=3)),
                ('amount', djmoney.models.fields.MoneyField(decimal_places=2, max_digits=20)),
                ('purpose', models.TextField(blank=True, default='', help_text='The recipient can read this. You can leave this blank.', max_length=500)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('state', models.CharField(choices=[('SC', 'Successful'), ('RV', 'Revoked')], default='SC', max_length=2)),
                ('authorized_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_account', models.ForeignKey(on_delete=models.SET(bank.models.get_deleted_account), related_name='transactions_from', to='bank.account')),
                ('to_account', models.ForeignKey(on_delete=models.SET(bank.models.get_deleted_account), related_name='transactions_to', to='bank.account')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedCorporation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('featured_since', models.DateTimeField(default=django.utils.timezone.now)),
                ('ad_message', models.TextField(max_length=1000)),
                ('corporation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bank.corporation')),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='corporate_holder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bank.corporation'),
        ),
        migrations.AddField(
            model_name='account',
            name='individual_holder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EmployeeInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corporation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.corporation')),
                ('potential_employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('potential_employee', 'corporation')},
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employed_since', models.DateTimeField(default=django.utils.timezone.now)),
                ('corporation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.corporation')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employed_at', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('person', 'corporation')},
            },
        ),
    ]
